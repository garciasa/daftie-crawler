{"version":3,"sources":["Header.tsx","Details.tsx","Figures.tsx","Utils.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Header","className","Details","data","lastWeek","map","item","index","key","target","rel","href","brandlink","meters","date","format","price","replace","Figures","total","isLoading","length","compareDate","a","b","result","Boolean","window","location","hostname","match","ReactDOM","render","useState","setIsLoading","houses","setHouses","setTotal","setLastWeek","useEffect","axios","get","then","resp","sort","OrderByDate","moment","forEach","subtract","push","console","log","AddedLastWeek","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4969b444.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <section className=\"header flex items-center mx-auto bg-houseBlue-light h-12\">\n      <div className=\"flex-shrink-0 text-white font-semibold pl-2\">\n        HouseCrawler <span className=\"text-xs\">v0.1</span>\n      </div>\n      <div className=\"mx-auto text-white\">Wexford Town</div>\n    </section>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\ninterface Props {\n  data: Array<any>;\n  lastWeek: Array<any>;\n}\n\nfunction Details({ data, lastWeek }: Props): React.ReactElement {\n  return (\n    <section className=\"details\">\n      <div className=\"bg-houseBlue-light  ml-10 mt-10 mr-10 pb-5 rounded-lg shadow-lg\">\n        <div className=\"text-white text-lg ml-5 pt-4 font-semibold\">\n          Added in the last 7 days\n        </div>\n        <table className=\"table-auto w-full ml-3 mt-5 text-white\">\n          <tbody>\n            {lastWeek.map((item, index) => (\n              <tr key={index} className=\"h-10\">\n                <td>\n                  <span className=\"mr-2 text-houseTurquoise-light\">\n                    &#9679;\n                  </span>{\" \"}\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={`https://daft.ie${item.brandlink}`}\n                  >\n                    {item.brandlink}\n                  </a>\n                </td>\n                <td className=\"px-10\">{item.meters}</td>\n                <td>{item.date.format(\"DD/MM/YYYY\")}</td>\n                <td>{item.price}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"bg-houseBlue-light  ml-10 mt-10 mr-10 pb-5 rounded-lg shadow-lg\">\n        <div className=\"text-white text-lg ml-5 pt-4 font-semibold\">\n          All houses\n        </div>\n        <table className=\"table-auto w-full ml-3 mt-5 text-white\">\n          <tbody>\n            {data.map((item, index) => (\n              <tr key={index} className=\"h-10\">\n                <td>\n                  <span className=\"mr-2 text-houseTurquoise-dark\">&#9679;</span>{\" \"}\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={`https://daft.ie${item.brandlink}`}\n                  >\n                    {item.brandlink}\n                  </a>\n                </td>\n                <td>{item.meters}</td>\n                <td>{item.date.format(\"DD/MM/YYYY\")}</td>\n                <td>{item.price.replace(\"In excess of \", \"\")}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </section>\n  );\n}\n\nexport default Details;\n","import React from \"react\";\n\ninterface Props {\n  total: number;\n  lastWeek: Array<any>;\n  isLoading: boolean;\n}\n\nfunction Figures({ total, lastWeek, isLoading }: Props): React.ReactElement {\n  return (\n    <section className=\"figures flex p-6\">\n      <div className=\"bg-houseBlue-light ml-10 mt-5 rounded-lg h-32 w-64 text-center shadow-lg\">\n        <div className=\"text-6xl text-houseTurquoise-light\">\n          {lastWeek.length}\n        </div>\n        <div className=\"text-sm font-semibold text-white\">\n          Added last 7 days\n        </div>\n      </div>\n      <div className=\"bg-houseBlue-light ml-10 mt-5 rounded-lg h-32 w-64 text-center shadow-lg\">\n        <div className=\"text-6xl text-houseTurquoise-dark\">\n          {isLoading ? \"-\" : total}\n        </div>\n        <div className=\"text-sm font-semibold text-white\">Total</div>\n      </div>\n      <div className=\"bg-houseBlue-light ml-10 mt-5 rounded-lg h-32 w-64 text-center shadow-lg\">\n        <div className=\"text-5xl text-white\">--:--</div>\n        <div className=\"text-sm text-white\">--/--/--</div>\n        <div className=\"text-sm font-semibold text-white\">Last Parsed</div>\n      </div>\n    </section>\n  );\n}\n\nexport default Figures;\n","import moment from \"moment\";\n\ninterface House {\n  brandlink: string;\n  price: string;\n  date: moment.Moment;\n  newdevelopment: boolean;\n  meters: string;\n  eircode: string;\n}\n\nfunction compareDate(a: any, b: any): number {\n  let result = 1;\n  if (a.date > b.date) {\n    result = -1;\n  }\n  return result;\n}\n\nexport function Convert(data: Array<any>): Array<House> {\n  data.map(item => (item.date = moment(item.date, \"DD/MM/YYYY\")));\n\n  return data;\n}\n\nexport function OrderByDate(data: Array<House>): Array<House> {\n  data.sort(compareDate);\n  return data;\n}\n\nexport function AddedLastWeek(data: Array<House>): Array<House> {\n  let lastWeek: Array<House> = [];\n\n  data.forEach(item => {\n    if (item.date > moment().subtract(7, \"days\")) {\n      lastWeek.push(item);\n    }\n  });\n  console.log(lastWeek);\n\n  return lastWeek;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Details from \"./Details\";\nimport Figures from \"./Figures\";\nimport { Convert, OrderByDate, AddedLastWeek } from \"./Utils\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [houses, setHouses] = useState<any>([]);\n  const [total, setTotal] = useState(0);\n  const [lastWeek, setLastWeek] = useState<any>([]);\n\n  useEffect(() => {\n    axios.get(\"http://127.0.0.1:8080/api/v1/houses\").then(resp => {\n      setHouses(OrderByDate(Convert(resp.data)));\n      setTotal(resp.data.length);\n      setLastWeek(AddedLastWeek(resp.data));\n      setIsLoading(false);\n    });\n  }, []);\n\n  //const data = OrderByDate(Convert(fakeData));\n  //const total = data.length;\n  //const lastWeek = AddedLastWeek(data);\n  return (\n    <div className=\"bg-houseBlue-dark w-full\">\n      <Header />\n      <Figures isLoading={isLoading} total={total} lastWeek={lastWeek} />\n      <Details data={houses} lastWeek={lastWeek} />\n    </div>\n  );\n}\n"],"sourceRoot":""}